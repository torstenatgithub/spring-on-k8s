name: Delete

on: [delete, workflow_dispatch]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REF: ${{ github.event.ref }}

jobs:
  delete:
    runs-on: ubuntu-latest

    steps:
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Docker Image for Branch or Tag
        run: |
          name=${REF//[\/]/-}
          echo "Deleting Docker image for ${{ github.event.ref_type }} ${name}"
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$name || true

      - name: Remove Image Tag
        uses: actions/github-script@v5
        with:
          script: |
            let image = "${{ github.repository }}"
            let ref = "${{ github.event.ref }}";#
            let tag = ref.replace("/", "-");

            let iteratePackageVersions = async function* (name) {
              for await (const response of github.paginate.iterator(
                github.packages.getAllPackageVersionsForPackageOwnedByAuthenticatedUser,
                {
                  package_type: "container",
                  package_name: name
                  state: "active",
                  per_page: 100,
                }
              )) {
                for (let packageVersion of response.data) {
                  yield packageVersion;
                }
              }
            };

            let deletePackageVersion = async (name, versionId) => {
              await github.packages.deletePackageVersionForAuthenticatedUser({
                package_type: "container",
                package_name: name,
                package_version_id: versionId,
              });
            };

            let findPackageVersionByTag = async function (name, tag) {
              const tags = new Set();

              for await (const pkgVer of iteratePackageVersions(name)) {
                const versionTags = pkgVer.metadata.container.tags;

                if (versionTags.includes(tag)) {
                  return pkgVer;
                } else {
                  versionTags.map((item) => {
                    tags.add(item);
                  });
                }
              }

              throw new Error(
                `Package with tag '${tag}' does not exits, available tags: ${Array.from(
                  tags
                ).join(", ")}`
              );
            };

            core.info(`Search package version with tag ${tag}...`);

            const packageVersion = await findPackageVersionByTag(
              image,
              tag
            );

            core.info(`Package id is #${packageVersion.id}, delete it...`);

            await deletePackageVersion(
                image,
                packageVersion.id
            );

            core.info(`Package #${packageVersion.id} deleted.`);
